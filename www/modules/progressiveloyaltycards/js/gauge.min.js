function loadImage(url) {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.onload = () => resolve(img);
    img.onerror = () => reject(new Error(`load ${url} fail`));
    img.src = url;
  });
}
function generate(option){    
    this.canvas = document.getElementById('myCanvas');
    this.start = option.curve_gap;
    this.angle = 1 - this.start;
    this.end = 3 - this.start;
    this.context = this.canvas.getContext('2d');
    this.max = option.total_point;
    this.context.beginPath();
    this.radius = (this.canvas.width/2) - option.lineWidth - 10;//80; // for example
    this.context.arc(this.canvas.width/2, this.canvas.height/2, this.radius, Math.PI * this.start,Math.PI * this.end,false);
    this.context.lineWidth = option.lineWidth;
    this.context.strokeStyle = option.card_background;//'black';
    this.context.lineCap = "round";
    this.context.stroke();
    
    var font = "bold " + 30 +"px "+option.font_family;
    this.context.font = font;
    this.context.textBaseline = "top";
    this.context.textAlign = 'center';
  
    this.context.fillText(option.achived_point, this.canvas.width/2 ,(this.canvas.height)/2 - option.lineWidth);
    this.context.restore();
  
    this.context.beginPath();
    var till = this.start + ((this.end - this.start)/this.max)*option.achived_point; 
    context.arc(this.canvas.width/2, this.canvas.height/2, this.radius, Math.PI * this.start,Math.PI * till,false);
    this.context.strokeStyle = option.background;//'blue';
    this.context.lineCap = "round";
    this.context.stroke();
    this.min = 0;
    var getangle = function (value) {
        return (1 - this.angle) * Math.PI + ((value - this.min) / (this.max - this.min)) * ((2 + this.angle) - (1 - this.angle)) * Math.PI;
    };
    context.translate(radius, radius);
    for (j = 0, len = option.rewards.length; j < len; j++) {
        value = parseInt(option.rewards[j].value);
        if ( (value >= this.min) && (value <= this.max)) {          
            const myOptions = Object.assign({}, option.rewards[j]);
            loadImage(myOptions.uri).then(img => {
                ang = getangle(myOptions.value);
                x = Math.round(this.radius * Math.cos(ang));
                y = Math.round(this.radius * Math.sin(ang));
                this.context.drawImage(img, x, y, option.image_size , option.image_size );
            });
        }
    }    
}